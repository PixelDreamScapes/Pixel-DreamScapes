---
import "../styles/global.css";

export interface Props {
  title: string;
}
const { title } = Astro.props;
---

<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <title>{title}</title>
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  </head>
  <body class="bg-[#0f0f0f] text-white font-sans m-0">
    <header class="px-6 py-4 flex items-center justify-between bg-[#0e0e0e] border-b border-[#1e1e1e] relative z-50">
<div class="flex items-center gap-5">
  <div class="text-2xl font-pacifico bg-gradient-to-r from-primary to-secondary text-transparent bg-clip-text">
    logo
  </div>
  <a
    href="/"
    class="hidden sm:block text-base sm:text-sm md:text-sm font-press tracking-wide bg-gradient-to-r from-primary to-secondary text-transparent bg-clip-text whitespace-nowrap"
  >
    Pixel DreamScapes
  </a>
</div>
<!-- Mobile menu button -->
<button
  id="nav-toggle"
  class="md:hidden text-gray-300 focus:outline-none"
  aria-label="Toggle navigation"
>
  <div class="space-y-1.5">
    <span class="block w-6 h-0.5 bg-gray-300 transition-all duration-300" id="bar1"></span>
    <span class="block w-6 h-0.5 bg-gray-300 transition-all duration-300" id="bar2"></span>
    <span class="block w-6 h-0.5 bg-gray-300 transition-all duration-300" id="bar3"></span>
  </div>
</button>

<!-- Nav menu -->
<nav
  id="nav-menu"
  class="absolute top-full left-0 w-full flex-col bg-[#0e0e0e] pt-4 pb-6 border-t border-[#1e1e1e]
         md:static md:flex md:flex-row md:items-center md:space-x-6 md:pt-0 md:pb-0 md:border-none
         text-sm text-gray-300 transform scale-y-0 opacity-0 transition-all duration-300 ease-out origin-top hidden md:opacity-100 md:scale-y-100 md:transform-none md:block"
>
<!-- Mobile menu -->
<div class="flex flex-col space-y-2 md:hidden text-center font-['VT323'] text-xl">
  <a href="/" class="block px-6 py-2 hover:text-primary transition-colors">Home</a>
  <a href="/gear" class="block px-6 py-2 hover:text-primary transition-colors">Gear</a>
  <a href="/software" class="block px-6 py-2 hover:text-primary transition-colors">Software</a>
  <a href="/blog" class="block px-6 py-2 hover:text-primary transition-colors">Blog</a>
  <a href="/about" class="block px-6 py-2 hover:text-primary transition-colors">About</a>
</div>

  <!-- Desktop menu with hover animation -->
  <div class="hidden md:flex space-x-8 font-['VT323'] text-xl">
    <a
      href="/"
      class="hover:text-primary transition-colors relative group cursor-pointer"
    >
      HOME
      <span class="absolute -bottom-1 left-0 w-0 h-1 bg-primary transition-all duration-300 group-hover:w-full"></span>
    </a>
    <a
      href="/gear"
      class="hover:text-primary transition-colors relative group cursor-pointer"
    >
      GEAR
      <span class="absolute -bottom-1 left-0 w-0 h-1 bg-primary transition-all duration-300 group-hover:w-full"></span>
    </a>
    <a
      href="/software"
      class="hover:text-primary transition-colors relative group cursor-pointer"
    >
      SOFTWARE
      <span class="absolute -bottom-1 left-0 w-0 h-1 bg-primary transition-all duration-300 group-hover:w-full"></span>
    </a>
    <a
      href="/blog"
      class="hover:text-primary transition-colors relative group cursor-pointer"
    >
      BLOG
      <span class="absolute -bottom-1 left-0 w-0 h-1 bg-primary transition-all duration-300 group-hover:w-full"></span>
    </a>
    <a
      href="/about"
      class="hover:text-primary transition-colors relative group cursor-pointer"
    >
      ABOUT
      <span class="absolute -bottom-1 left-0 w-0 h-1 bg-primary transition-all duration-300 group-hover:w-full"></span>
    </a>
  </div>
</nav>
    </header>

    <slot />
<script is:inline>
  const toggleButton = document.getElementById('nav-toggle');
  const navMenu = document.getElementById('nav-menu');

  const bar1 = document.getElementById('bar1');
  const bar2 = document.getElementById('bar2');
  const bar3 = document.getElementById('bar3');

  let isOpen = false;

  toggleButton?.addEventListener('click', () => {
    isOpen = !isOpen;

    if (isOpen) {
      // Animate icon to X
      bar1.classList.add('rotate-45', 'translate-y-2');
      bar2.classList.add('opacity-0');
      bar3.classList.add('-rotate-45', '-translate-y-2');

      // Unhide + trigger transition
      navMenu.classList.remove('hidden');
      requestAnimationFrame(() => {
        navMenu.classList.add('scale-y-100', 'opacity-100');
        navMenu.classList.remove('scale-y-0', 'opacity-0');
      });
    } else {
      // Animate icon back to hamburger
      bar1.classList.remove('rotate-45', 'translate-y-2');
      bar2.classList.remove('opacity-0');
      bar3.classList.remove('-rotate-45', '-translate-y-2');

      // Reverse transition, then hide after fade
      navMenu.classList.remove('scale-y-100', 'opacity-100');
      navMenu.classList.add('scale-y-0', 'opacity-0');
      setTimeout(() => {
        navMenu.classList.add('hidden');
      }, 300); // match duration
    }
  });
</script>
  </body>
</html>